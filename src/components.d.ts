/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface MyComponent {
      'first': string;
      'last': string;
    }
  }

  interface HTMLMyComponentElement extends StencilComponents.MyComponent, HTMLStencilElement {}

  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };
  interface HTMLElementTagNameMap {
    'my-component': HTMLMyComponentElement;
  }
  interface ElementTagNameMap {
    'my-component': HTMLMyComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-component': JSXElements.MyComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface MyComponentAttributes extends HTMLAttributes {
      'first'?: string;
      'last'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface UikitButtonSelector {
      'colorSelected': string;
      'onSelect': (e: number) => void;
      'selected': number;
    }
  }

  interface HTMLUikitButtonSelectorElement extends StencilComponents.UikitButtonSelector, HTMLStencilElement {}

  var HTMLUikitButtonSelectorElement: {
    prototype: HTMLUikitButtonSelectorElement;
    new (): HTMLUikitButtonSelectorElement;
  };
  interface HTMLElementTagNameMap {
    'uikit-button-selector': HTMLUikitButtonSelectorElement;
  }
  interface ElementTagNameMap {
    'uikit-button-selector': HTMLUikitButtonSelectorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'uikit-button-selector': JSXElements.UikitButtonSelectorAttributes;
    }
  }
  namespace JSXElements {
    export interface UikitButtonSelectorAttributes extends HTMLAttributes {
      'colorSelected'?: string;
      'onOnselect'?: (event: CustomEvent) => void;
      'onSelect'?: (e: number) => void;
      'selected'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface UikitButtonToggle {
      'checked': boolean;
      'iconAccept': string;
      'iconReject': string;
      'labelAccept': string;
      'labelReject': string;
    }
  }

  interface HTMLUikitButtonToggleElement extends StencilComponents.UikitButtonToggle, HTMLStencilElement {}

  var HTMLUikitButtonToggleElement: {
    prototype: HTMLUikitButtonToggleElement;
    new (): HTMLUikitButtonToggleElement;
  };
  interface HTMLElementTagNameMap {
    'uikit-button-toggle': HTMLUikitButtonToggleElement;
  }
  interface ElementTagNameMap {
    'uikit-button-toggle': HTMLUikitButtonToggleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'uikit-button-toggle': JSXElements.UikitButtonToggleAttributes;
    }
  }
  namespace JSXElements {
    export interface UikitButtonToggleAttributes extends HTMLAttributes {
      'checked'?: boolean;
      'iconAccept'?: string;
      'iconReject'?: string;
      'labelAccept'?: string;
      'labelReject'?: string;
      'onToggle'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface UikitButton {
      'color': string;
      'disabled': boolean;
      'fab': boolean;
      'fullwidth': boolean;
      'outline': boolean;
      'size': string;
    }
  }

  interface HTMLUikitButtonElement extends StencilComponents.UikitButton, HTMLStencilElement {}

  var HTMLUikitButtonElement: {
    prototype: HTMLUikitButtonElement;
    new (): HTMLUikitButtonElement;
  };
  interface HTMLElementTagNameMap {
    'uikit-button': HTMLUikitButtonElement;
  }
  interface ElementTagNameMap {
    'uikit-button': HTMLUikitButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'uikit-button': JSXElements.UikitButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface UikitButtonAttributes extends HTMLAttributes {
      'color'?: string;
      'disabled'?: boolean;
      'fab'?: boolean;
      'fullwidth'?: boolean;
      'outline'?: boolean;
      'size'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface UikitCheckbox {

    }
  }

  interface HTMLUikitCheckboxElement extends StencilComponents.UikitCheckbox, HTMLStencilElement {}

  var HTMLUikitCheckboxElement: {
    prototype: HTMLUikitCheckboxElement;
    new (): HTMLUikitCheckboxElement;
  };
  interface HTMLElementTagNameMap {
    'uikit-checkbox': HTMLUikitCheckboxElement;
  }
  interface ElementTagNameMap {
    'uikit-checkbox': HTMLUikitCheckboxElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'uikit-checkbox': JSXElements.UikitCheckboxAttributes;
    }
  }
  namespace JSXElements {
    export interface UikitCheckboxAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface UikitIcon {
      'name': any;
    }
  }

  interface HTMLUikitIconElement extends StencilComponents.UikitIcon, HTMLStencilElement {}

  var HTMLUikitIconElement: {
    prototype: HTMLUikitIconElement;
    new (): HTMLUikitIconElement;
  };
  interface HTMLElementTagNameMap {
    'uikit-icon': HTMLUikitIconElement;
  }
  interface ElementTagNameMap {
    'uikit-icon': HTMLUikitIconElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'uikit-icon': JSXElements.UikitIconAttributes;
    }
  }
  namespace JSXElements {
    export interface UikitIconAttributes extends HTMLAttributes {
      'name'?: any;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;